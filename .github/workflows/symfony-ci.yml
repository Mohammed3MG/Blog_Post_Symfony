name: Symfony CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  symfony-ci:
    runs-on: ubuntu-latest
    
    env:
      APP_ENV: test
      DATABASE_URL: sqlite:///%kernel.project_dir%/var/data.db

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: blogpost
        ports:
          - 3306:3306
        options: > 
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up PHP with required extensions
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3' # Use the latest PHP version
          extensions: mbstring, intl, pdo, pdo_mysql, pdo_sqlite
          tools: composer, symfony
          coverage: none  # Optional if you plan to collect coverage reports

      # Cache composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Install dependencies
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --no-scripts

      # Run Symfony console commands
      - name: Prepare environment
        run: |
          php bin/console doctrine:database:create --env=test || true
          php bin/console doctrine:schema:update --force --env=test

      # Cache npm dependencies (optional)
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Install node dependencies and run asset build (optional for front-end apps)
      - name: Install and build assets
        run: |
          npm install
          npm run build

      # Run Symfony Tests via PHPUnit
      - name: Run PHPUnit tests
        run: ./vendor/bin/phpunit --testdox --coverage-text

      # Optionally, build and push Docker images (if needed for deployment)
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: mohammed3mg/symfony_blogpost:latest
          secrets: |
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}

      # Optionally, you can upload coverage reports or any test artifacts
      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: phpunit-report
          path: ./tests/phpunit-report.xml
